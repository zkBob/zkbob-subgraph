// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DirectDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DirectDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DirectDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DirectDeposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DirectDeposit | null {
    return changetype<DirectDeposit | null>(
      store.get_in_block("DirectDeposit", id)
    );
  }

  static load(id: string): DirectDeposit | null {
    return changetype<DirectDeposit | null>(store.get("DirectDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pending(): boolean {
    let value = this.get("pending");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set pending(value: boolean) {
    this.set("pending", Value.fromBoolean(value));
  }

  get completed(): boolean {
    let value = this.get("completed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get refunded(): boolean {
    let value = this.get("refunded");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set refunded(value: boolean) {
    this.set("refunded", Value.fromBoolean(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get fallbackUser(): Bytes {
    let value = this.get("fallbackUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set fallbackUser(value: Bytes) {
    this.set("fallbackUser", Value.fromBytes(value));
  }

  get zkAddress_diversifier(): Bytes {
    let value = this.get("zkAddress_diversifier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set zkAddress_diversifier(value: Bytes) {
    this.set("zkAddress_diversifier", Value.fromBytes(value));
  }

  get zkAddress_pk(): Bytes {
    let value = this.get("zkAddress_pk");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set zkAddress_pk(value: Bytes) {
    this.set("zkAddress_pk", Value.fromBytes(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get bnInit(): BigInt {
    let value = this.get("bnInit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bnInit(value: BigInt) {
    this.set("bnInit", Value.fromBigInt(value));
  }

  get tsInit(): BigInt {
    let value = this.get("tsInit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tsInit(value: BigInt) {
    this.set("tsInit", Value.fromBigInt(value));
  }

  get txInit(): Bytes {
    let value = this.get("txInit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txInit(value: Bytes) {
    this.set("txInit", Value.fromBytes(value));
  }

  get bnClosed(): BigInt | null {
    let value = this.get("bnClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bnClosed(value: BigInt | null) {
    if (!value) {
      this.unset("bnClosed");
    } else {
      this.set("bnClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get tsClosed(): BigInt | null {
    let value = this.get("tsClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tsClosed(value: BigInt | null) {
    if (!value) {
      this.unset("tsClosed");
    } else {
      this.set("tsClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get txClosed(): Bytes | null {
    let value = this.get("txClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txClosed(value: Bytes | null) {
    if (!value) {
      this.unset("txClosed");
    } else {
      this.set("txClosed", Value.fromBytes(<Bytes>value));
    }
  }
}

export class LastSyncBlock extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LastSyncBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LastSyncBlock must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LastSyncBlock", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LastSyncBlock | null {
    return changetype<LastSyncBlock | null>(
      store.get_in_block("LastSyncBlock", id.toHexString())
    );
  }

  static load(id: Bytes): LastSyncBlock | null {
    return changetype<LastSyncBlock | null>(
      store.get("LastSyncBlock", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }
}
